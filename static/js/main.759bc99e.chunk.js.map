{"version":3,"sources":["SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["SortingVisualizer","props","myArrayBars","state","array","value","generateButton","arrayRef","this","setState","console","log","i","length","j","temp","style","backgroundColor","Promise","resolve","setTimeout","pos","small","k","ms","p","r","x","sleepSome","Partition","q","quickSort","start","mid","end","n1","n2","left","right","Math","floor","mergeSort","merge","randomizeArray","push","random","event","target","Container","fluid","className","Button","margin","disabled","variant","onClick","bind","onChange","handleChange","min","max","bubbleSorthelper","mergeSortHelper","quickSortHelper","insertionSort","selectionSort","map","index","key","ref","height","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.759bc99e.chunk.js","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\nimport Button from 'react-bootstrap/Button';\nimport { Container } from 'react-bootstrap';\nimport RangeSlider from 'react-bootstrap-range-slider';\n// const this.state.value = 100 // size of array \nclass SortingVisualizer extends React.Component{\n    \n    constructor(props) { \n        super(props);\n        this.myArrayBars = [] // use an array \n        \n        this.state = {\n            array: [],\n            value: 30,\n            generateButton: false, \n        };\n\n        this.arrayRef = [] // refs using callback method\n \n    }\n\n    \n    async bubbleSorthelper() {\n        this.setState({generateButton: true})\n        var array = this.state.array\n\n        console.log(this.arrayRef)\n        //const sortedArray = bubbleSort(array);\n        //this.setState({sortedArray})\n        var i, j;\n        // var arrayBars = document.getElementsByClassName('bar');\n\n        // let us use refs instead \n\n        for(i = 0; i<array.length; i++){\n            for(j = 0; j<array.length-i-1; j++){\n        \n                if(array[j+1]<array[j]){\n                    var temp = array[j];\n                    array[j] = array[j+1];\n                    array[j+1] = temp;\n                    this.arrayRef[j].style.backgroundColor = '#2d00f7';// '#d63447';\n                    this.arrayRef[j+1].style.backgroundColor = '#2d00f7';//'#d63447';\n                    await new Promise(resolve => setTimeout(resolve, 10));\n                }\n                this.arrayRef[j].style.backgroundColor = '#d100d1';//'#3da4ab';\n                this.arrayRef[j+1].style.backgroundColor =  '#d100d1';//'#3da4ab';\n            }\n            this.setState({array})\n            this.arrayRef[array.length-i-1].style.backgroundColor = '#e0aaff';//'#bbf1c8';\n        }\n        this.setState({array})\n        // var n = this.state.value\n        \n        for(i=0;i<this.state.array.length;i++){\n            await new Promise(resolve => setTimeout(resolve, 0.5));\n            if(this.arrayRef[i]){\n                this.arrayRef[i].style.backgroundColor = '#3da4ab';\n            }\n            else{\n                break\n            }\n        }\n        this.setState({generateButton: false})\n        \n    }\n    async selectionSort(){\n        this.setState({generateButton: true})\n        var array = this.state.array\n        // var arrayBars = document.getElementsByClassName('bar')\n\n        var small, pos=0, i, k, temp\n\n        for(i=0;i<this.state.array.length;i++){\n            await new Promise(resolve => setTimeout(resolve, 5));\n            this.arrayRef[i].style.backgroundColor = '#3a86ff'\n            small = array[i]\n            pos = i            \n            for(k=i+1;k<this.state.array.length;k++){\n                await new Promise(resolve => setTimeout(resolve, 5));\n                this.arrayRef[k].style.backgroundColor = '#ffbe0b';\n                if(array[k]<small){\n                    small = array[k]\n                    pos = k\n                }\n                await new Promise(resolve => setTimeout(resolve, 5));\n                this.arrayRef[k].style.backgroundColor = '#3a86ff';\n            }\n        \n            temp = array[i]\n            array[i] = small\n            array[pos] = temp\n            this.setState({array})\n\n            await new Promise(resolve => setTimeout(resolve, 7));\n            this.arrayRef[i].style.backgroundColor = '#ff006e'\n        }\n        this.setState({array})\n        for(i=0;i<this.state.array.length;i++){\n            await new Promise(resolve => setTimeout(resolve, 0.5)); \n            this.arrayRef[i].style.backgroundColor = '#3da4ab';\n        }\n        this.setState({generateButton: false})\n    }\n\n    sleepSome(ms){\n        return new Promise((resolve)=>{setTimeout(resolve, ms)})\n    }\n    \n    async Partition(array, p, r){\n        var x = array[r]\n        var i = p-1\n\n        var j,temp\n\n        for(j=p;j<r;j++){\n            temp = 0\n            if(array[j]<=x){\n\n                this.arrayRef[j].style.backgroundColor = '#ff6b6b'\n                await this.sleepSome(200)\n                this.arrayRef[j].style.backgroundColor = '#3da4ab'\n                \n                i = i+1\n                temp=array[j]\n                array[j] = array[i]\n                array[i] = temp\n            }\n        }\n        temp = 0 \n        temp = array[r]\n        array[r] = array[i+1]\n        array[i+1] = temp\n        \n        await this.sleepSome(200)\n        this.arrayRef[i+1].style.backgroundColor = '#f6bd60'\n\n        await this.sleepSome(200)\n        this.setState({array})\n\n        return i + 1\n\n    }\n    \n    async quickSort(array, p, r) {\n            if(p<r){\n                var q = await this.Partition(array,p,r)\n                console.log(p, ' ', r)\n                await this.quickSort(array, p, q-1)\n                await this.quickSort(array,q+1,r)\n            }  \n    }\n    \n    async quickSortHelper(){\n        \n        this.setState({generateButton: true})\n        \n        console.log(this.state.generateButton)\n\n        var array = this.state.array\n\n        // instead of using the state value, use the state array's length \n        \n        await this.quickSort(array, 0, array.length-1 )\n\n        this.setState({array})\n        this.setState({generateButton: false})\n        \n        var i \n        for(i=0;i<this.arrayRef.length;i++){\n            await this.sleepSome(10)\n            if(this.arrayRef[i]){\n                this.arrayRef[i].style.backgroundColor = '#3da4ab'\n            }\n            else {\n                console.log(i)\n                console.log(this.arrayRef[i])\n                console.log(this.arrayRef.length)\n            }\n        }\n\n    }\n    async merge(array, start, mid, end){\n        var n1 = mid - start +1\n        var n2 = end - mid\n\n        var left = []\n        var right = []\n\n        var i, j, k = 0;\n\n        for(i=0;i<n1;i++){\n            left[i] = array[start + i]\n        }\n        for(j=0;j<n2;j++){\n            right[j] = array[mid + 1 + j]\n        }\n\n        var i = 0 , j = 0 , k = start \n\n        while(i<n1 && j<n2){\n            if(left[i]<=right[j]){\n                this.arrayRef[k].style.backgroundColor = '#fe938c'\n                await this.sleepSome(100)\n                this.arrayRef[k].style.backgroundColor = '#3da4ab'\n                array[k] = left[i]\n                i += 1\n                k += 1\n                this.setState({array})\n                await this.sleepSome(15)\n            }\n            else{\n                this.arrayRef[k].style.backgroundColor = '#fe938c'\n                await this.sleepSome(100)\n                this.arrayRef[k].style.backgroundColor = '#3da4ab'\n                array[k] = right[j]\n                j += 1\n                k += 1\n                this.setState({array})\n                await this.sleepSome(15)\n            }\n        }\n\n        while(i<n1){\n            this.arrayRef[k].style.backgroundColor = '#fe938c'\n            await this.sleepSome(100)\n            this.arrayRef[k].style.backgroundColor = '#3da4ab'\n\n            array[k] = left[i]\n            i += 1\n            k += 1\n            this.setState({array})\n            await this.sleepSome(15)\n        }\n        while(j<n2){\n            this.arrayRef[k].style.backgroundColor = '#fe938c'\n            await this.sleepSome(100)\n            this.arrayRef[k].style.backgroundColor = '#3da4ab'\n\n            array[k] = right[j]\n            j += 1\n            k += 1\n            this.setState({array})\n            await this.sleepSome(15)\n        }\n    \n        this.setState({array})\n        await this.sleepSome(90)\n               \n    }\n    \n    async mergeSort(array, start, end){\n        if(start<end){\n            var mid = Math.floor(start + (end-start)/2)\n            this.arrayRef[mid].style.backgroundColor = '#e01a4f'\n            await this.sleepSome(100)\n\n            await this.mergeSort(array, start, mid)\n            await this.mergeSort(array,mid+1, end)\n            await this.merge(array, start, mid, end)   \n        }\n    }\n\n    async mergeSortHelper () {\n        var array = this.state.array\n        this.setState({generateButton:true})\n        await this.mergeSort(array, 0, array.length - 1)\n        this.setState({generateButton: false})\n\n        this.setState({array})\n\n    }\n\n    async insertionSort() {\n        this.setState({generateButton: true}) // disable the generateArrayButton\n        var array = this.state.array // current array to be sorted \n\n        var i, j;\n        for(i=0;i<this.state.array.length;i++){\n            var temp = array[i];\n            await new Promise(resolve => setTimeout(resolve, 5));\n            this.arrayRef[i].style.backgroundColor = '#ff1654';\n            \n            j = i-1;\n            while(j>=0 && array[j]>temp){\n                await new Promise(resolve => setTimeout(resolve, 5));\n                this.arrayRef[j].style.backgroundColor = '#ff1654';\n                array[j+1] = array[j];\n                await new Promise(resolve => setTimeout(resolve, 1));\n                this.arrayRef[j].style.backgroundColor = '#7678ed'//'#ffa6c1';\n                j = j - 1;\n            }\n            this.arrayRef[i].style.backgroundColor = '#7678ed' //'#ffa6c1';\n\n            array[j+1] = temp;\n            this.setState({array})\n        }\n        for(i=0;i<this.state.array.length;i++){\n            await new Promise(resolve => setTimeout(resolve, 0.5));\n            if(this.arrayRef[i]){\n                this.arrayRef[i].style.backgroundColor = '#3da4ab';\n            }\n        }\n        this.setState({generateButton: false})\n\n    }\n\n    componentDidMount() {\n        this.randomizeArray();\n        \n    }\n    \n    randomizeArray() {\n        const array = [];\n        for(let i = 0; i<this.state.value;i++){\n            array.push(Math.floor((Math.random() * 550) + 5));\n        }\n        this.setState({array});\n    }    \n    handleChange(event) {\n        this.setState({value: event.target.value});\n        this.randomizeArray()\n    }\n    render(){\n        const {array} = this.state;\n        return (\n            <Container fluid style={{backgroundColor:'black'}}>\n                <div className=\"header\"><h1>Sorting Visualizer</h1></div>\n                <div className='range-slider'>\n                <Button style={{margin: '10px'}} disabled={this.state.generateButton} variant=\"outline-primary\" onClick={this.randomizeArray.bind(this)}>Generate New Array</Button>{' '}\n                <RangeSlider\n                // onChange={changeEvent => this.setState({ value: changeEvent.target.value})}\n                value = {this.state.value}\n                disabled={this.state.generateButton}\n                onChange={this.handleChange.bind(this)}\n                variant=\"info\"\n                min=\"30\"\n                max=\"100\"\n                />\n                <Button style={{margin: '10px'}} variant=\"outline-primary\" onClick={this.bubbleSorthelper.bind(this)}>Bubble Sort</Button>{' '}\n                <Button style={{margin: '10px'}} variant=\"outline-primary\" onClick={this.mergeSortHelper.bind(this)}>Merge Sort</Button>{' '}\n                <Button style={{margin: '10px'}} variant=\"outline-primary\" onClick={this.quickSortHelper.bind(this)}>Quick Sort</Button>{' '}\n                <Button style={{margin: '10px'}} variant=\"outline-primary\" onClick={this.insertionSort.bind(this)}>Insertion Sort</Button>{' '}\n                <Button style={{margin: '10px'}} variant=\"outline-primary\"onClick={this.selectionSort.bind(this)}>Selection Sort</Button>{' '}\n                </div>\n                <div className=\"array-bars\" >\n                {array.map((value, index) => (\n                    <div>\n                        <div \n                        className=\"bar\" \n                        key={index} \n                        ref = {(value) => this.arrayRef[index] = value}\n                        style={{height: `${value}px`}}></div>\n                    </div>\n                ))}\n                </div>\n                \n            </Container>\n        );\n    }\n}\n\nexport default SortingVisualizer;","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer.js';\nfunction App() {\n  return (\n    <SortingVisualizer></SortingVisualizer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}