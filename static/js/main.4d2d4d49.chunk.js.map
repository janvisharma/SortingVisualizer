{"version":3,"sources":["SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["SortingVisualizer","props","state","array","generateButton","this","setState","arrayBars","document","getElementsByClassName","i","length","j","temp","style","backgroundColor","Promise","resolve","setTimeout","randomizeArray","push","Math","floor","random","Container","fluid","className","map","value","index","key","height","Button","margin","disabled","variant","onClick","bind","bubbleSorthelper","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mWA+EeA,E,kDA1EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,MAAO,GACPC,gBAAgB,GALL,E,uLAUfC,KAAKC,SAAS,CAACF,gBAAgB,IAC3BD,EAAQE,KAAKH,MAAMC,MAInBI,EAAYC,SAASC,uBAAuB,OAE5CC,EAAI,E,YAAGA,EAAEP,EAAMQ,Q,iBACXC,EAAI,E,YAAGA,EAAET,EAAMQ,OAAOD,EAAE,G,sBAErBP,EAAMS,EAAE,GAAGT,EAAMS,I,wBACZC,EAAOV,EAAMS,GACjBT,EAAMS,GAAKT,EAAMS,EAAE,GACnBT,EAAMS,EAAE,GAAKC,EACbN,EAAUK,GAAGE,MAAMC,gBAAkB,UACrCR,EAAUK,EAAE,GAAGE,MAAMC,gBAAkB,U,UACjC,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,O,QAErDV,EAAUK,GAAGE,MAAMC,gBAAkB,UACrCR,EAAUK,EAAE,GAAGE,MAAMC,gBAAmB,U,QAXbH,I,uBAa/BP,KAAKC,SAAS,CAACH,UACfI,EAAUJ,EAAMQ,OAAOD,EAAE,GAAGI,MAAMC,gBAAkB,U,QAf7BL,I,uBAkB3B,IAAIA,EAAE,EAAEA,EAAE,IAAIA,IACVH,EAAUG,GAAGI,MAAMC,gBAAkB,UAEzCV,KAAKC,SAAS,CAACF,gBAAgB,I,iJAK/BC,KAAKc,mB,uCAKL,IADA,IAAMhB,EAAQ,GACNO,EAAI,EAAGA,EAAE,IAAIA,IACjBP,EAAMiB,KAAKC,KAAKC,MAAuB,IAAhBD,KAAKE,SAAkB,IAElDlB,KAAKC,SAAS,CAACH,Y,+BAGV,IACEA,EAASE,KAAKH,MAAdC,MACP,OAEI,kBAACqB,EAAA,EAAD,CAAWC,OAAK,EAACX,MAAO,CAACC,gBAAgB,UACrC,yBAAKW,UAAU,UAAS,mDACvBvB,EAAMwB,KAAI,SAACC,EAAOC,GAAR,OAAmB,yBAAKH,UAAU,MAAMI,IAAKD,EAAOf,MAAO,CAACiB,OAAO,GAAD,OAAKH,EAAL,YAC7E,yBAAKF,UAAU,WACf,kBAACM,EAAA,EAAD,CAAQlB,MAAO,CAACmB,OAAQ,OAAQC,SAAU7B,KAAKH,MAAME,eAAgB+B,QAAQ,kBAAkBC,QAAS/B,KAAKc,eAAekB,KAAKhC,OAAjI,sBAAoK,IACpK,kBAAC2B,EAAA,EAAD,CAAQlB,MAAO,CAACmB,OAAQ,OAAQE,QAAQ,kBAAkBC,QAAS/B,KAAKiC,iBAAiBD,KAAKhC,OAA9F,eAA0H,IAC1H,kBAAC2B,EAAA,EAAD,CAAQlB,MAAO,CAACmB,OAAQ,OAAQE,QAAQ,mBAAxC,cAA8E,IAC9E,kBAACH,EAAA,EAAD,CAAQlB,MAAO,CAACmB,OAAQ,OAAQE,QAAQ,mBAAxC,cAA8E,IAC9E,kBAACH,EAAA,EAAD,CAAQlB,MAAO,CAACmB,OAAQ,OAAQE,QAAQ,mBAAxC,kBAAkF,IAClF,kBAACH,EAAA,EAAD,CAAQlB,MAAO,CAACmB,OAAQ,OAAQE,QAAQ,mBAAxC,kBAAkF,U,GApElEI,IAAMC,WCKvBC,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAAS0C,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4d2d4d49.chunk.js","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\nimport Button from 'react-bootstrap/Button';\nimport { Container, Row, Col } from 'react-bootstrap';\nclass SortingVisualizer extends React.Component{\n    constructor(props) { \n        super(props);\n\n        this.state = {\n            array: [],\n            generateButton: false, \n        };\n    }\n\n    async bubbleSorthelper() {\n        this.setState({generateButton: true})\n        var array = this.state.array\n        //const sortedArray = bubbleSort(array);\n        //this.setState({sortedArray})\n        var i, j;\n        var arrayBars = document.getElementsByClassName('bar');\n\n        for(i = 0; i<array.length; i++){\n            for(j = 0; j<array.length-i-1; j++){\n        \n                if(array[j+1]<array[j]){\n                    var temp = array[j];\n                    array[j] = array[j+1];\n                    array[j+1] = temp;\n                    arrayBars[j].style.backgroundColor = '#2d00f7';// '#d63447';\n                    arrayBars[j+1].style.backgroundColor = '#2d00f7';//'#d63447';\n                    await new Promise(resolve => setTimeout(resolve, 10));\n                }\n                arrayBars[j].style.backgroundColor = '#d100d1';//'#3da4ab';\n                arrayBars[j+1].style.backgroundColor =  '#d100d1';//'#3da4ab';\n            }\n            this.setState({array})\n            arrayBars[array.length-i-1].style.backgroundColor = '#8900f2';//'#bbf1c8';\n        }\n\n        for(i=0;i<180;i++){\n            arrayBars[i].style.backgroundColor = '#3da4ab';\n        }\n        this.setState({generateButton: false})\n\n    }\n\n    componentDidMount() {\n        this.randomizeArray();\n    }\n\n    randomizeArray() {\n        const array = [];\n        for(let i = 0; i<180;i++){\n            array.push(Math.floor((Math.random() * 600) + 5));\n        }\n        this.setState({array});\n    }    \n    \n    render(){\n        const {array} = this.state;\n        return (\n            // <div className=\"container\">\n            <Container fluid style={{backgroundColor:'black'}}>\n                <div className=\"header\"><h1>Sorting Visualizer</h1></div>\n                {array.map((value, index) => (<div className=\"bar\" key={index} style={{height: `${value}px`}}></div>))}\n                <div className=\"buttons\">\n                <Button style={{margin: '5px'}} disabled={this.state.generateButton} variant=\"outline-primary\" onClick={this.randomizeArray.bind(this)}>Generate New Array</Button>{' '}\n                <Button style={{margin: '5px'}} variant=\"outline-primary\" onClick={this.bubbleSorthelper.bind(this)}>Bubble Sort</Button>{' '}\n                <Button style={{margin: '5px'}} variant=\"outline-primary\">Merge Sort</Button>{' '}\n                <Button style={{margin: '5px'}} variant=\"outline-primary\">Quick Sort</Button>{' '}\n                <Button style={{margin: '5px'}} variant=\"outline-primary\">Insertion Sort</Button>{' '}\n                <Button style={{margin: '5px'}} variant=\"outline-primary\">Selection Sort</Button>{' '}\n                </div>\n            </Container>\n        );\n    }\n}\n\nexport default SortingVisualizer;","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer.js';\nfunction App() {\n  return (\n    <SortingVisualizer></SortingVisualizer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}